# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  PROJECT_ID: ${{ secrets.PROJECT_ID }}
  DOCKER_USER: ${{ secrets.DOCKER_USER }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
  GOOGLE_SERVICE_ACCOUNT_KEY: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_KEY}}
  AUTH_SECRET_KEY: ${{ secrets.AUTH_SECRET_KEY }}

jobs:
  build-backend:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ./backend/package-lock.json
    - run: npm ci
      working-directory: ./backend
      
    - run: npm run build --if-present
      working-directory: ./backend
      
    - run: npm test
      working-directory: ./backend
      
  build-frontend:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [22.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v4
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: ./frontend/package-lock.json
    - run: npm ci
      working-directory: ./frontend
      
    - run: npm run build --if-present
      working-directory: ./frontend
      
    - run: npm test
      working-directory: ./frontend

  push-images:
    runs-on: ubuntu-latest
    needs: build-backend
    if: success()

    steps:
    - uses: actions/checkout@v4

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKER_USER }}
        password: ${{ env.DOCKER_PASSWORD }}

    - name: Push
      run: |
        IMAGE_TAG="ivanenkomak/whois-api:1"
        echo "Building Docker image with tag: ${IMAGE_TAG}"
        docker buildx build -t "${IMAGE_TAG}" --file ./backend/Dockerfile . --push

  deploy-to-cloud-run:
    runs-on: ubuntu-latest
    needs: push-images
    if: true
    steps:
    # Authenticate with Google Cloud
    - name: Authenticate with Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ env.GOOGLE_SERVICE_ACCOUNT_KEY }}

    # Install Google Cloud SDK
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: ${{ env.PROJECT_ID }}

    # Deploy to Cloud Run
    - name: Deploy server to Cloud Run
      run: |
        gcloud run deploy whois-api \
          --image ivanenkomak/whois-api:1 \
          --platform managed \
          --region europe-central2 \
          --allow-unauthenticated \
          --set-env-vars "AUTH_SECRET_KEY=${{ env.AUTH_SECRET_KEY }}"